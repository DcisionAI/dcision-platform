d3bc0ab684874ed2e8a18203e6e364fb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const generated_1 = require("./generated");
describe('SDK Client', () => {
    it('should create a DefaultApi client instance', () => {
        const apiKey = 'test-key';
        const baseUrl = 'http://localhost';
        const client = (0, index_1.createClient)(apiKey, baseUrl);
        expect(client).toBeInstanceOf(generated_1.DefaultApi);
    });
    describe('wrapper functions', () => {
        const apiKey = 'abc123';
        beforeEach(() => {
            // @ts-ignore
            global.fetch = jest.fn((url, opts) => Promise.resolve({
                ok: true,
                json: () => Promise.resolve({ success: true, url, body: opts === null || opts === void 0 ? void 0 : opts.body })
            }));
        });
        afterEach(() => {
            jest.resetAllMocks();
        });
        it('solveLaborScheduling sends correct payload', async () => {
            const model = { foo: 'bar' };
            const res = await (0, index_1.solveLaborScheduling)(apiKey, model, { baseUrl: 'http://host' });
            expect(res).toEqual(expect.objectContaining({ success: true }));
            // verify fetch called on correct endpoint and body contains model
            expect(global.fetch.mock.calls[0][0]).toBe('http://host/mcp/submit');
            const body = JSON.parse(global.fetch.mock.calls[0][1].body);
            expect(body.model).toMatchObject({ problemType: 'labor_scheduling', ...model });
        });
        it('solveResourceAllocation sends correct payload', async () => {
            const model = { a: 1 };
            const res = await (0, index_1.solveResourceAllocation)(apiKey, model);
            expect(res).toEqual(expect.objectContaining({ success: true }));
            const called = global.fetch.mock.calls[0];
            expect(called[0]).toBe('https://mcp.dcisionai.com/mcp/submit');
            const b = JSON.parse(called[1].body);
            expect(b.context.problemType).toBe('equipment_allocation');
            expect(b.model).toMatchObject({ problemType: 'equipment_allocation', ...model });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FtZXlkaGF2bGUvRG9jdW1lbnRzL0RjaXNpb25BSS9kY2lzaW9uYWktcGxhdGZvcm0vcGFja2FnZXMvc2RrLWpzL3NyYy9pbmRleC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXNGO0FBQ3RGLDJDQUF5QztBQUV6QyxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUMxQixFQUFFLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQztRQUNuQyxNQUFNLE1BQU0sR0FBRyxJQUFBLG9CQUFZLEVBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsc0JBQVUsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUNqQyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUM7UUFDeEIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLGFBQWE7WUFDYixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FDbkMsT0FBTyxDQUFDLE9BQU8sQ0FBQztnQkFDZCxFQUFFLEVBQUUsSUFBSTtnQkFDUixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsSUFBSSxFQUFFLENBQUM7YUFDdEUsQ0FBUSxDQUNWLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUNILFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNENBQTRDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDMUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7WUFDN0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLDRCQUFvQixFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztZQUNsRixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEUsa0VBQWtFO1lBQ2xFLE1BQU0sQ0FBRSxNQUFNLENBQUMsS0FBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDcEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBRSxNQUFNLENBQUMsS0FBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN2QixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsK0JBQXVCLEVBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoRSxNQUFNLE1BQU0sR0FBSSxNQUFNLENBQUMsS0FBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsc0NBQXNDLENBQUMsQ0FBQztZQUMvRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUMzRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDbkYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbWV5ZGhhdmxlL0RvY3VtZW50cy9EY2lzaW9uQUkvZGNpc2lvbmFpLXBsYXRmb3JtL3BhY2thZ2VzL3Nkay1qcy9zcmMvaW5kZXgudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQsIHNvbHZlTGFib3JTY2hlZHVsaW5nLCBzb2x2ZVJlc291cmNlQWxsb2NhdGlvbiB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHsgRGVmYXVsdEFwaSB9IGZyb20gJy4vZ2VuZXJhdGVkJztcblxuZGVzY3JpYmUoJ1NESyBDbGllbnQnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGEgRGVmYXVsdEFwaSBjbGllbnQgaW5zdGFuY2UnLCAoKSA9PiB7XG4gICAgY29uc3QgYXBpS2V5ID0gJ3Rlc3Qta2V5JztcbiAgICBjb25zdCBiYXNlVXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuICAgIGNvbnN0IGNsaWVudCA9IGNyZWF0ZUNsaWVudChhcGlLZXksIGJhc2VVcmwpO1xuICAgIGV4cGVjdChjbGllbnQpLnRvQmVJbnN0YW5jZU9mKERlZmF1bHRBcGkpO1xuICB9KTtcbiAgXG4gIGRlc2NyaWJlKCd3cmFwcGVyIGZ1bmN0aW9ucycsICgpID0+IHtcbiAgICBjb25zdCBhcGlLZXkgPSAnYWJjMTIzJztcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKHVybCwgb3B0cykgPT5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBzdWNjZXNzOiB0cnVlLCB1cmwsIGJvZHk6IG9wdHM/LmJvZHkgfSlcbiAgICAgICAgfSkgYXMgYW55XG4gICAgICApO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzb2x2ZUxhYm9yU2NoZWR1bGluZyBzZW5kcyBjb3JyZWN0IHBheWxvYWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2RlbCA9IHsgZm9vOiAnYmFyJyB9O1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgc29sdmVMYWJvclNjaGVkdWxpbmcoYXBpS2V5LCBtb2RlbCwgeyBiYXNlVXJsOiAnaHR0cDovL2hvc3QnIH0pO1xuICAgICAgZXhwZWN0KHJlcykudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IHN1Y2Nlc3M6IHRydWUgfSkpO1xuICAgICAgLy8gdmVyaWZ5IGZldGNoIGNhbGxlZCBvbiBjb3JyZWN0IGVuZHBvaW50IGFuZCBib2R5IGNvbnRhaW5zIG1vZGVsXG4gICAgICBleHBlY3QoKGdsb2JhbC5mZXRjaCBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHNbMF1bMF0pLnRvQmUoJ2h0dHA6Ly9ob3N0L21jcC9zdWJtaXQnKTtcbiAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKChnbG9iYWwuZmV0Y2ggYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzWzBdWzFdLmJvZHkpO1xuICAgICAgZXhwZWN0KGJvZHkubW9kZWwpLnRvTWF0Y2hPYmplY3QoeyBwcm9ibGVtVHlwZTogJ2xhYm9yX3NjaGVkdWxpbmcnLCAuLi5tb2RlbCB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzb2x2ZVJlc291cmNlQWxsb2NhdGlvbiBzZW5kcyBjb3JyZWN0IHBheWxvYWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2RlbCA9IHsgYTogMSB9O1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgc29sdmVSZXNvdXJjZUFsbG9jYXRpb24oYXBpS2V5LCBtb2RlbCk7XG4gICAgICBleHBlY3QocmVzKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgc3VjY2VzczogdHJ1ZSB9KSk7XG4gICAgICBjb25zdCBjYWxsZWQgPSAoZ2xvYmFsLmZldGNoIGFzIGplc3QuTW9jaykubW9jay5jYWxsc1swXTtcbiAgICAgIGV4cGVjdChjYWxsZWRbMF0pLnRvQmUoJ2h0dHBzOi8vbWNwLmRjaXNpb25haS5jb20vbWNwL3N1Ym1pdCcpO1xuICAgICAgY29uc3QgYiA9IEpTT04ucGFyc2UoY2FsbGVkWzFdLmJvZHkpO1xuICAgICAgZXhwZWN0KGIuY29udGV4dC5wcm9ibGVtVHlwZSkudG9CZSgnZXF1aXBtZW50X2FsbG9jYXRpb24nKTtcbiAgICAgIGV4cGVjdChiLm1vZGVsKS50b01hdGNoT2JqZWN0KHsgcHJvYmxlbVR5cGU6ICdlcXVpcG1lbnRfYWxsb2NhdGlvbicsIC4uLm1vZGVsIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==