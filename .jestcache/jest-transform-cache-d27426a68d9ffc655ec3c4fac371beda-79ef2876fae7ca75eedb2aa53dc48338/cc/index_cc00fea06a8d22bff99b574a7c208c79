302f042311d3089e7261532dcc9cfe9c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClient = createClient;
exports.solveLaborScheduling = solveLaborScheduling;
exports.solveResourceAllocation = solveResourceAllocation;
exports.solveProjectScheduling = solveProjectScheduling;
exports.solveMaterialDeliveryPlanning = solveMaterialDeliveryPlanning;
exports.solveRiskSimulation = solveRiskSimulation;
const generated_1 = require("./generated");
/**
 * Create a DcisionAI client for Decision Workflows.
 * @param apiKey - Your API key for authentication
 * @param baseUrl - Base URL for the MCP API (default: https://mcp.dcisionai.com)
 */
function createClient(apiKey, baseUrl = 'https://mcp.dcisionai.com') {
    const config = new generated_1.Configuration({
        basePath: baseUrl,
        apiKey: () => apiKey
    });
    return new generated_1.DefaultApi(config);
}
/** Generic function to submit an MCP job */
/**
 * Internal: submit MCP config and return parsed response.
 * Throws on HTTP or network errors.
 */
async function submitMCP(apiKey, config, baseUrl) {
    const client = createClient(apiKey, baseUrl);
    try {
        const resp = await client.postMcpSubmit(config);
        return resp;
    }
    catch (err) {
        // Wrap and rethrow
        throw new Error(`MCP submission failed: ${err.message}`);
    }
}
// ==== Workflow wrappers ====
/**
 * Solve a labor scheduling problem.
 */
/** Solve labor scheduling problem. */
async function solveLaborScheduling(apiKey, model, options) {
    const cfg = {
        sessionId: (options === null || options === void 0 ? void 0 : options.sessionId) || `labor-scheduling-${Date.now()}`,
        protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Solve labor scheduling', required: true }] },
        context: { problemType: 'labor_scheduling' },
        model: { problemType: 'labor_scheduling', ...model }
    };
    return submitMCP(apiKey, cfg, options === null || options === void 0 ? void 0 : options.baseUrl);
}
/**
 * Solve a resource (equipment) allocation problem.
 */
/** Solve resource allocation problem. */
async function solveResourceAllocation(apiKey, model, options) {
    const cfg = {
        sessionId: (options === null || options === void 0 ? void 0 : options.sessionId) || `equipment-allocation-${Date.now()}`,
        protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Solve equipment allocation', required: true }] },
        context: { problemType: 'equipment_allocation' },
        model: { problemType: 'equipment_allocation', ...model }
    };
    return submitMCP(apiKey, cfg, options === null || options === void 0 ? void 0 : options.baseUrl);
}
/**
 * Solve a project scheduling / risk simulation problem.
 */
/** Solve project scheduling / risk simulation problem. */
async function solveProjectScheduling(apiKey, model, options) {
    const cfg = {
        sessionId: (options === null || options === void 0 ? void 0 : options.sessionId) || `project-scheduling-${Date.now()}`,
        protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Run project risk simulation', required: true }] },
        context: { problemType: 'risk_simulation' },
        model: { problemType: 'risk_simulation', ...model }
    };
    return submitMCP(apiKey, cfg, options === null || options === void 0 ? void 0 : options.baseUrl);
}
/**
 * Solve a material delivery planning (VRPTW) problem.
 */
/** Solve material delivery planning (VRPTW) problem. */
async function solveMaterialDeliveryPlanning(apiKey, model, options) {
    const cfg = {
        sessionId: (options === null || options === void 0 ? void 0 : options.sessionId) || `material-delivery-${Date.now()}`,
        protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Solve material delivery planning', required: true }] },
        context: { problemType: 'material_delivery_planning' },
        model: { problemType: 'material_delivery_planning', ...model }
    };
    return submitMCP(apiKey, cfg, options === null || options === void 0 ? void 0 : options.baseUrl);
}
/**
 * Solve a risk simulation problem.
 */
/** Solve risk simulation problem. */
async function solveRiskSimulation(apiKey, model, options) {
    const cfg = {
        sessionId: (options === null || options === void 0 ? void 0 : options.sessionId) || `risk-simulation-${Date.now()}`,
        protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Run risk simulation', required: true }] },
        context: { problemType: 'risk_simulation' },
        model: { problemType: 'risk_simulation', ...model }
    };
    return submitMCP(apiKey, cfg, options === null || options === void 0 ? void 0 : options.baseUrl);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,