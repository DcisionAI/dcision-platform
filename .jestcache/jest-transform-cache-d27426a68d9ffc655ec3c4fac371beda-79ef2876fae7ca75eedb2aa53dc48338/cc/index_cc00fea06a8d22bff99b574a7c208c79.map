{"file":"/Users/ameydhavle/Documents/DcisionAI/dcisionai-platform/packages/sdk-js/src/index.ts","mappings":"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","names":[],"sources":["/Users/ameydhavle/Documents/DcisionAI/dcisionai-platform/packages/sdk-js/src/index.ts"],"sourcesContent":["import { Configuration, DefaultApi, MCPConfig, MCPResponse } from './generated';\n\n/**\n * Create a DcisionAI client for Decision Workflows.\n * @param apiKey - Your API key for authentication\n * @param baseUrl - Base URL for the MCP API (default: https://mcp.dcisionai.com)\n */\nexport function createClient(\n  apiKey: string,\n  baseUrl: string = 'https://mcp.dcisionai.com'\n): DefaultApi {\n  const config = new Configuration({\n    basePath: baseUrl,\n    apiKey: () => apiKey\n  });\n  return new DefaultApi(config);\n}\n\n/** Generic function to submit an MCP job */\n/**\n * Internal: submit MCP config and return parsed response.\n * Throws on HTTP or network errors.\n */\nasync function submitMCP(\n  apiKey: string,\n  config: MCPConfig,\n  baseUrl?: string\n): Promise<MCPResponse> {\n  const client = createClient(apiKey, baseUrl);\n  try {\n    const resp = await client.postMcpSubmit(config);\n    return resp;\n  } catch (err: any) {\n    // Wrap and rethrow\n    throw new Error(`MCP submission failed: ${err.message}`);\n  }\n}\n\n// ==== Workflow wrappers ====\n/**\n * Solve a labor scheduling problem.\n */\n/** Solve labor scheduling problem. */\nexport async function solveLaborScheduling(\n  apiKey: string,\n  model: Record<string, any>,\n  options?: { sessionId?: string; baseUrl?: string }\n): Promise<MCPResponse> {\n  const cfg = {\n    sessionId: options?.sessionId || `labor-scheduling-${Date.now()}`,\n    protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Solve labor scheduling', required: true }] },\n    context: { problemType: 'labor_scheduling' },\n    model: { problemType: 'labor_scheduling', ...model }\n  };\n  return submitMCP(apiKey, cfg, options?.baseUrl);\n}\n\n/**\n * Solve a resource (equipment) allocation problem.\n */\n/** Solve resource allocation problem. */\nexport async function solveResourceAllocation(\n  apiKey: string,\n  model: Record<string, any>,\n  options?: { sessionId?: string; baseUrl?: string }\n): Promise<MCPResponse> {\n  const cfg = {\n    sessionId: options?.sessionId || `equipment-allocation-${Date.now()}`,\n    protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Solve equipment allocation', required: true }] },\n    context: { problemType: 'equipment_allocation' },\n    model: { problemType: 'equipment_allocation', ...model }\n  };\n  return submitMCP(apiKey, cfg, options?.baseUrl);\n}\n\n/**\n * Solve a project scheduling / risk simulation problem.\n */\n/** Solve project scheduling / risk simulation problem. */\nexport async function solveProjectScheduling(\n  apiKey: string,\n  model: Record<string, any>,\n  options?: { sessionId?: string; baseUrl?: string }\n): Promise<MCPResponse> {\n  const cfg = {\n    sessionId: options?.sessionId || `project-scheduling-${Date.now()}`,\n    protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Run project risk simulation', required: true }] },\n    context: { problemType: 'risk_simulation' },\n    model: { problemType: 'risk_simulation', ...model }\n  };\n  return submitMCP(apiKey, cfg, options?.baseUrl);\n}\n\n/**\n * Solve a material delivery planning (VRPTW) problem.\n */\n/** Solve material delivery planning (VRPTW) problem. */\nexport async function solveMaterialDeliveryPlanning(\n  apiKey: string,\n  model: Record<string, any>,\n  options?: { sessionId?: string; baseUrl?: string }\n): Promise<MCPResponse> {\n  const cfg = {\n    sessionId: options?.sessionId || `material-delivery-${Date.now()}`,\n    protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Solve material delivery planning', required: true }] },\n    context: { problemType: 'material_delivery_planning' },\n    model: { problemType: 'material_delivery_planning', ...model }\n  };\n  return submitMCP(apiKey, cfg, options?.baseUrl);\n}\n\n/**\n * Solve a risk simulation problem.\n */\n/** Solve risk simulation problem. */\nexport async function solveRiskSimulation(\n  apiKey: string,\n  model: Record<string, any>,\n  options?: { sessionId?: string; baseUrl?: string }\n): Promise<MCPResponse> {\n  const cfg = {\n    sessionId: options?.sessionId || `risk-simulation-${Date.now()}`,\n    protocol: { steps: [{ id: 'solve_step', action: 'solve_model', description: 'Run risk simulation', required: true }] },\n    context: { problemType: 'risk_simulation' },\n    model: { problemType: 'risk_simulation', ...model }\n  };\n  return submitMCP(apiKey, cfg, options?.baseUrl);\n}"],"version":3}