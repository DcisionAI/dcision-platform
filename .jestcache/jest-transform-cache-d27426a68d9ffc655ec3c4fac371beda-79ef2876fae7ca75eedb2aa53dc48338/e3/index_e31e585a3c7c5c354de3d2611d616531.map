{"file":"/Users/ameydhavle/Documents/DcisionAI/dcisionai-platform/packages/sdk-js/src/generated/index.ts","mappings":";AAAA,4FAA4F;;;AAqB5F,MAAa,aAAa;IAGxB,YAAY,MAAkD;QAC5D,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;CACF;AAPD,sCAOC;AAED,MAAa,UAAU;IAGrB,YAAY,MAAqB;QAC/B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CAAC,GAAc;QAChC,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,aAAa,EAAE;YACrD,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,UAAU,IAAI,CAAC,MAAM,EAAE,EAAE;aAC3C;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;SAC1B,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,QAAQ,GAAG,CAAC,MAAM,KAAK,MAAM,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC7D,CAAC;QACD,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;CACF;AAzBD,gCAyBC","names":[],"sources":["/Users/ameydhavle/Documents/DcisionAI/dcisionai-platform/packages/sdk-js/src/generated/index.ts"],"sourcesContent":["// Auto-generated minimal client stub. Replace with OpenAPI Generator output when available.\n\nexport interface MCPConfig {\n  sessionId: string;\n  protocol: any;\n  context: any;\n  model: any;\n}\n\nexport interface MCPResult {\n  step: any;\n  agent: string;\n  result: any;\n}\n\nexport interface MCPResponse {\n  sessionId: string;\n  status: string;\n  results: MCPResult[];\n}\n\nexport class Configuration {\n  public basePath: string;\n  public apiKey: () => string;\n  constructor(params: { basePath: string; apiKey: () => string }) {\n    this.basePath = params.basePath;\n    this.apiKey = params.apiKey;\n  }\n}\n\nexport class DefaultApi {\n  private basePath: string;\n  private apiKey: () => string;\n  constructor(config: Configuration) {\n    this.basePath = config.basePath;\n    this.apiKey = config.apiKey;\n  }\n\n  /**\n   * Submit a decision workflow (MCP) job\n   */\n  async postMcpSubmit(mcp: MCPConfig): Promise<MCPResponse> {\n    const res = await fetch(`${this.basePath}/mcp/submit`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.apiKey()}`\n      },\n      body: JSON.stringify(mcp)\n    });\n    if (!res.ok) {\n      throw new Error(`HTTP ${res.status}: ${await res.text()}`);\n    }\n    return res.json();\n  }\n}"],"version":3}